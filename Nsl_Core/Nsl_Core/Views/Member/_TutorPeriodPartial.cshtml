@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
@using Nsl_Core.Models.Dtos.Member.Login;
@using Nsl_Core.Models.Infra;
@using System.Text.Json;
@{
	LoginDto? user = null;
	string? token = Accessor.HttpContext.Request.Cookies.Get<string>("Login");
	if (token != null)
	{
		user = JsonSerializer.Deserialize<LoginDto?>(JwtHelpers.DecodeToken(token));
	}
}

@inject IHttpContextAccessor Accessor
<div class="col-lg-12" id="calendarTeacher"></div>

<script>
	async function getTeacherPeriod(teacherId) {
		const calendarTeacher = document.getElementById('calendarTeacher');
		let teacherCalendar = new FullCalendar.Calendar(calendarTeacher, {
			themeSystem: 'default',
			initialView: 'dayGridWeek',
			events: {
				url: `https://localhost:7016/api/Tutor/TeacherTutorPeriod?teacherId=${teacherId}`,
				method: 'GET',
				success: function(){
					$("#stockTitle").text("剩餘此老師課程數量:")
				},
				failure: function () {
					$("#stockTitle").text("請先選擇想選課的老師");
					$("#stockCount").html(" ")
				},
			},
			eventClick: function (info) {
				if (info.event.title === '已預約') {
					return;
				}
				const starttime = formatDate(info.event.start)
				Swal.fire({
					title: '操作確認',
					text: `要選擇${starttime}這段時間嗎？`,
					showCancelButton: true,
					confirmButtonText: '確定',
					cancelButtonText: '取消',
				}).then(result => {
					if (result.isConfirmed) {
						createCourse(info.event.start, calendarTeacher)
					}
				})
			},
			eventTimeFormat: { // like '14:30:00'
				hour: 'numeric',
				minute: '2-digit',
				meridiem: false,
				hour12: false
			},

		});
		teacherCalendar.render();
	}

	function createCourse(tutorTime, calendar) {
		const url = "https://localhost:7016/api/Tutor/MemberSelectCourse";
		const formData =
		{
			MemberId: @user.Id,
			TeacherId: teacherSelect.val(),
			TutorTime: tutorTime
		};
		$.ajax({
			url: url,
			type: 'POST',
			contentType: 'application/json',
			data: JSON.stringify(formData),
		}).done(function (data) {
			if (data.isSuccess) {
				Swal.fire({
					icon: 'success',
					title: '排課成功！',
					text: '可以在行事曆上看見囉！',
				}).then(result => {
					if (result.isConfirmed) {
						memberCalendar.refetchEvents();
						memberCalendar.render();
						tutorPageLoad()
					}
				})

			}
			else {
				Swal.fire({
					icon: 'error',
					title: '排課失敗！',
					text: `${data.errMsg}`
				})
			}
		});
	}

	function formatDate(date) {
		if (date == null) {
			return "";
		}
		let d = new Date(date),
			hour = '' + d.getHours(),
			minute = '' + d.getMinutes(),
			second = '' + d.getMinutes();

		if (hour.length < 2)
			hour = '0' + hour;
		if (minute.length < 2)
			minute = '0' + minute;
		if (second.length < 2)
			second = '0' + second;
		return [hour, minute, second].join(':');
	}



</script>