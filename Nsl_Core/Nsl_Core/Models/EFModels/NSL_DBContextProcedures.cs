// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Nsl_Core.Models.EFModels;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Nsl_Core.Models.EFModels
{
    public partial class NSL_DBContext
    {
        private INSL_DBContextProcedures _procedures;

        public virtual INSL_DBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new NSL_DBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public INSL_DBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<spGetMemberTutorPeriodResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spGetTeacherTutorPeriodResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spMessageResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spMessageDetailResult>().HasNoKey().ToView(null);
        }
    }

    public partial class NSL_DBContextProcedures : INSL_DBContextProcedures
    {
        private readonly NSL_DBContext _context;

        public NSL_DBContextProcedures(NSL_DBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<spGetMemberTutorPeriodResult>> spGetMemberTutorPeriodAsync(int? MemberId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MemberId",
                    Value = MemberId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetMemberTutorPeriodResult>("EXEC @returnValue = [Member].[spGetMemberTutorPeriod] @MemberId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spGetTeacherTutorPeriodResult>> spGetTeacherTutorPeriodAsync(int? TeacherId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TeacherId",
                    Value = TeacherId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spGetTeacherTutorPeriodResult>("EXEC @returnValue = [Teacher].[spGetTeacherTutorPeriod] @TeacherId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spMessageResult>> spMessageAsync(int? SenderId, int? RecipientId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SenderId",
                    Value = SenderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RecipientId",
                    Value = RecipientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spMessageResult>("EXEC @returnValue = [dbo].[spMessage] @SenderId, @RecipientId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spMessageDetailResult>> spMessageDetailAsync(int? SenderId, int? RecipientId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SenderId",
                    Value = SenderId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RecipientId",
                    Value = RecipientId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spMessageDetailResult>("EXEC @returnValue = [dbo].[spMessageDetail] @SenderId, @RecipientId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
