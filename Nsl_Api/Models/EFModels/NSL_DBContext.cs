// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Nsl_Api.Models.EFModels
{
    public partial class NSL_DBContext : DbContext
    {
        public NSL_DBContext()
        {
        }

        public NSL_DBContext(DbContextOptions<NSL_DBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Areas> Areas { get; set; }
        public virtual DbSet<Articles> Articles { get; set; }
        public virtual DbSet<ArticlesClick> ArticlesClick { get; set; }
        public virtual DbSet<BankCode> BankCode { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<ChatHistories> ChatHistories { get; set; }
        public virtual DbSet<ChatNumber> ChatNumber { get; set; }
        public virtual DbSet<Citys> Citys { get; set; }
        public virtual DbSet<Comments> Comments { get; set; }
        public virtual DbSet<CouponUsageHistory> CouponUsageHistory { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<Languages> Languages { get; set; }
        public virtual DbSet<MemberData> MemberData { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<MembersConsumptionRecordDetails> MembersConsumptionRecordDetails { get; set; }
        public virtual DbSet<MembersConsumptionRecords> MembersConsumptionRecords { get; set; }
        public virtual DbSet<MembersTutorRecords> MembersTutorRecords { get; set; }
        public virtual DbSet<MembersTutorStock> MembersTutorStock { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<PaymentMethods> PaymentMethods { get; set; }
        public virtual DbSet<RevenueTarget> RevenueTarget { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<ShoppingCart> ShoppingCart { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<TeacherData> TeacherData { get; set; }
        public virtual DbSet<TeacherId> TeacherId { get; set; }
        public virtual DbSet<TeachersApply> TeachersApply { get; set; }
        public virtual DbSet<TeachersDefaultTutorPeriods> TeachersDefaultTutorPeriods { get; set; }
        public virtual DbSet<TeachersLanguages> TeachersLanguages { get; set; }
        public virtual DbSet<TeachersRealTutorPeriods> TeachersRealTutorPeriods { get; set; }
        public virtual DbSet<TeachersResume> TeachersResume { get; set; }
        public virtual DbSet<TeachersSalaryRecords> TeachersSalaryRecords { get; set; }
        public virtual DbSet<TeachersTags> TeachersTags { get; set; }
        public virtual DbSet<TutorExperience> TutorExperience { get; set; }
        public virtual DbSet<TutorHoursOfWeek> TutorHoursOfWeek { get; set; }
        public virtual DbSet<TutorPeriod> TutorPeriod { get; set; }
        public virtual DbSet<Week> Week { get; set; }
        public virtual DbSet<WorkStatus> WorkStatus { get; set; }
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Areas>(entity =>
            {
                entity.ToTable("Areas", "Others");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Areas)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Areas_Citys");
            });

            modelBuilder.Entity<Articles>(entity =>
            {
                entity.ToTable("Articles", "Article");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Picture).HasMaxLength(50);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ArticlesClick>(entity =>
            {
                entity.ToTable("ArticlesClick", "Article");

                entity.Property(e => e.ClickTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Article)
                    .WithMany(p => p.ArticlesClick)
                    .HasForeignKey(d => d.ArticleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ArticlesClick_Articles");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.ArticlesClick)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("FK_ArticlesClick_Members");
            });

            modelBuilder.Entity<BankCode>(entity =>
            {
                entity.ToTable("BankCode", "Others");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Categories>(entity =>
            {
                entity.ToTable("Categories", "Others");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ChatHistories>(entity =>
            {
                entity.ToTable("ChatHistories", "Chat");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.MessageTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.ChatHistories)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatHistories_Members");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.ChatHistories)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatHistories_TeacherId");
            });

            modelBuilder.Entity<ChatNumber>(entity =>
            {
                entity.HasKey(e => e.MemberId);

                entity.ToTable("ChatNumber", "Chat");

                entity.Property(e => e.MemberId).ValueGeneratedNever();

                entity.Property(e => e.RandomNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Member)
                    .WithOne(p => p.ChatNumber)
                    .HasForeignKey<ChatNumber>(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ChatNumber_Members1");
            });

            modelBuilder.Entity<Citys>(entity =>
            {
                entity.ToTable("Citys", "Others");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Comments>(entity =>
            {
                entity.ToTable("Comments", "Comment");

                entity.Property(e => e.CommentContent).HasMaxLength(100);

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.MemberTutorRecord)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.MemberTutorRecordId)
                    .HasConstraintName("FK_Comments_MembersTutorRecords");
            });

            modelBuilder.Entity<CouponUsageHistory>(entity =>
            {
                entity.ToTable("CouponUsageHistory", "Coupon");

                entity.HasOne(d => d.Coupon)
                    .WithMany(p => p.CouponUsageHistory)
                    .HasForeignKey(d => d.CouponId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponUsageHistory_Coupons");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.CouponUsageHistory)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CouponUsageHistory_Members");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.ToTable("Coupons", "Coupon");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(80);

                entity.Property(e => e.DiscountMoney).HasColumnType("money");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Languages>(entity =>
            {
                entity.ToTable("Languages", "Others");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MemberData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MemberData");

                entity.Property(e => e.區域)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姓名)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.縣市)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.ToTable("Members", "Member");

                entity.HasIndex(e => e.Email, "IX_Member_1")
                    .IsUnique();

                entity.Property(e => e.Birthday).HasColumnType("datetime");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmailCheck).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmailToken).HasMaxLength(100);

                entity.Property(e => e.Gender).HasColumnName("gender");

                entity.Property(e => e.ImageName)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'default.jpg')");

                entity.Property(e => e.LineId).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Password).HasMaxLength(100);

                entity.Property(e => e.Phone).HasMaxLength(10);

                entity.Property(e => e.Role).HasDefaultValueSql("((1))");

                entity.Property(e => e.Salt).HasMaxLength(50);

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.AreaId)
                    .HasConstraintName("FK_Members_Areas");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Members_Citys");

                entity.HasOne(d => d.RoleNavigation)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.Role)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Members_Roles");
            });

            modelBuilder.Entity<MembersConsumptionRecordDetails>(entity =>
            {
                entity.ToTable("MembersConsumptionRecordDetails", "Member");

                entity.Property(e => e.CurrentPrice).HasColumnType("money");

                entity.HasOne(d => d.MembersConsumptionRecord)
                    .WithMany(p => p.MembersConsumptionRecordDetails)
                    .HasForeignKey(d => d.MembersConsumptionRecordId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersConsumptionRecordDetails_MembersConsumptionRecords");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.MembersConsumptionRecordDetails)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersConsumptionRecordDetails_TeacherId");
            });

            modelBuilder.Entity<MembersConsumptionRecords>(entity =>
            {
                entity.ToTable("MembersConsumptionRecords", "Member");

                entity.Property(e => e.ConsumeTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OrderCode)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MembersConsumptionRecords)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersConsumptionRecords_Members");

                entity.HasOne(d => d.Payment)
                    .WithMany(p => p.MembersConsumptionRecords)
                    .HasForeignKey(d => d.PaymentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersConsumptionRecords_PaymentMethods");
            });

            modelBuilder.Entity<MembersTutorRecords>(entity =>
            {
                entity.ToTable("MembersTutorRecords", "Member");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TeacherTutorPeriodId).HasColumnName("TeacherTutorPeriodID");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MembersTutorRecords)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersTutorRecords_Members");

                entity.HasOne(d => d.TeacherTutorPeriod)
                    .WithMany(p => p.MembersTutorRecords)
                    .HasForeignKey(d => d.TeacherTutorPeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersTutorRecords_TeachersRealTutorPeriods");
            });

            modelBuilder.Entity<MembersTutorStock>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.TeacherId })
                    .HasName("PK_MemberTutorStock");

                entity.ToTable("MembersTutorStock", "Member");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.MembersTutorStock)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersTutorStock_Members");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.MembersTutorStock)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_MembersTutorStock_TeacherId");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.ToTable("Message", "Chat");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.MessageText)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PaymentMethods>(entity =>
            {
                entity.ToTable("PaymentMethods", "Others");

                entity.Property(e => e.PaymentMethod)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<RevenueTarget>(entity =>
            {
                entity.ToTable("RevenueTarget", "Others");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.ToTable("Roles", "Others");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoppingCart>(entity =>
            {
                entity.ToTable("ShoppingCart", "Member");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ModifiedTime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.ShoppingCart)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoppingCart_Members");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.ShoppingCart)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoppingCart_TeacherId");
            });

            modelBuilder.Entity<Tags>(entity =>
            {
                entity.ToTable("Tags", "Others");

                entity.Property(e => e.CreatedTime).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TeacherData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TeacherData");

                entity.Property(e => e.區域)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.姓名)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.縣市)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.語言)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.身份)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<TeacherId>(entity =>
            {
                entity.ToTable("TeacherId", "Teacher");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.TeacherId)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeacherId_Members");
            });

            modelBuilder.Entity<TeachersApply>(entity =>
            {
                entity.HasKey(e => e.TeacherId);

                entity.ToTable("TeachersApply", "Teacher");

                entity.Property(e => e.TeacherId).ValueGeneratedNever();

                entity.Property(e => e.ApplyTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Intro).HasMaxLength(50);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.TeachersApply)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_Categories");

                entity.HasOne(d => d.RevenueTarget)
                    .WithMany(p => p.TeachersApply)
                    .HasForeignKey(d => d.RevenueTargetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_RevenueTarget");

                entity.HasOne(d => d.Teacher)
                    .WithOne(p => p.TeachersApply)
                    .HasForeignKey<TeachersApply>(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_TeacherId");

                entity.HasOne(d => d.TutorExperience)
                    .WithMany(p => p.TeachersApply)
                    .HasForeignKey(d => d.TutorExperienceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_TutorExperience");

                entity.HasOne(d => d.TutorHoursOfWeek)
                    .WithMany(p => p.TeachersApply)
                    .HasForeignKey(d => d.TutorHoursOfWeekId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_TutorHoursOfWeek");

                entity.HasOne(d => d.WorkStatus)
                    .WithMany(p => p.TeachersApply)
                    .HasForeignKey(d => d.WorkStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersApply_WorkStatus");
            });

            modelBuilder.Entity<TeachersDefaultTutorPeriods>(entity =>
            {
                entity.ToTable("TeachersDefaultTutorPeriods", "Teacher");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Period)
                    .WithMany(p => p.TeachersDefaultTutorPeriods)
                    .HasForeignKey(d => d.PeriodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersDefaultTutorPeriods_TutorPeriod");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeachersDefaultTutorPeriods)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersDefaultTutorPeriods_TeacherId");

                entity.HasOne(d => d.Weekday)
                    .WithMany(p => p.TeachersDefaultTutorPeriods)
                    .HasForeignKey(d => d.WeekdayId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersDefaultTutorPeriods_Week");
            });

            modelBuilder.Entity<TeachersLanguages>(entity =>
            {
                entity.HasKey(e => new { e.TeacherId, e.LanguageId })
                    .HasName("PK_TeacherLanguage");

                entity.ToTable("TeachersLanguages", "Teacher");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Language)
                    .WithMany(p => p.TeachersLanguages)
                    .HasForeignKey(d => d.LanguageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersLanguages_Languages");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeachersLanguages)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersLanguages_TeacherId");
            });

            modelBuilder.Entity<TeachersRealTutorPeriods>(entity =>
            {
                entity.ToTable("TeachersRealTutorPeriods", "Teacher");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeachersRealTutorPeriods)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersRealTutorPeriods_TeacherId");
            });

            modelBuilder.Entity<TeachersResume>(entity =>
            {
                entity.HasKey(e => e.TeacherId)
                    .HasName("PK_Teacher");

                entity.ToTable("TeachersResume", "Teacher");

                entity.Property(e => e.TeacherId).ValueGeneratedNever();

                entity.Property(e => e.BankAccount).HasMaxLength(20);

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Education).HasMaxLength(50);

                entity.Property(e => e.ModifiedTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.Title).HasMaxLength(50);

                entity.Property(e => e.WorkExperience).HasMaxLength(80);

                entity.HasOne(d => d.BankCode)
                    .WithMany(p => p.TeachersResume)
                    .HasForeignKey(d => d.BankCodeId)
                    .HasConstraintName("FK_TeachersResume_BankCode");

                entity.HasOne(d => d.Teacher)
                    .WithOne(p => p.TeachersResume)
                    .HasForeignKey<TeachersResume>(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersResume_TeacherId");
            });

            modelBuilder.Entity<TeachersSalaryRecords>(entity =>
            {
                entity.ToTable("TeachersSalaryRecords", "Teacher");

                entity.Property(e => e.PayTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeachersSalaryRecords)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersSalaryRecords_TeacherId");
            });

            modelBuilder.Entity<TeachersTags>(entity =>
            {
                entity.HasKey(e => new { e.TeacherId, e.TagId })
                    .HasName("PK_TeacherTag");

                entity.ToTable("TeachersTags", "Teacher");

                entity.Property(e => e.CreatedTime).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TeachersTags)
                    .HasForeignKey(d => d.TagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeacherTag_Tag");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.TeachersTags)
                    .HasForeignKey(d => d.TeacherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeachersTags_TeacherId");
            });

            modelBuilder.Entity<TutorExperience>(entity =>
            {
                entity.ToTable("TutorExperience", "Others");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TutorHoursOfWeek>(entity =>
            {
                entity.ToTable("TutorHoursOfWeek", "Others");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<TutorPeriod>(entity =>
            {
                entity.ToTable("TutorPeriod", "Others");

                entity.Property(e => e.TutorPeriod1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("TutorPeriod");
            });

            modelBuilder.Entity<Week>(entity =>
            {
                entity.ToTable("Week", "Others");

                entity.Property(e => e.Day).HasMaxLength(50);
            });

            modelBuilder.Entity<WorkStatus>(entity =>
            {
                entity.ToTable("WorkStatus", "Others");

                entity.Property(e => e.CreateTime).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}